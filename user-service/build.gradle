import groovy.sql.Sql

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.liquibase.gradle' version '2.2.0'
}

group = 'com.ecommerce'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation project(':common')
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "org.springframework.boot:spring-boot-configuration-processor"
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'commons-io:commons-io:2.13.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'

	liquibaseRuntime 'org.liquibase:liquibase-core:4.24.0'
	liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.1'
	liquibaseRuntime 'info.picocli:picocli:4.7.5'
	liquibaseRuntime 'org.postgresql:postgresql:42.7.3'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen:6.1.5.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.3"
	}
}

tasks.named("bootJar") {
	launchScript{
		enabled = true
	}
	enabled = true
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('migrateDatabase') {
	group = "database"
	description = "Migrate users database by liquibase"

	doFirst {
		liquibase {
			activities {
				main {
					defaultsFile "${rootProject.projectDir}/user-service/database/localDatabase.properties"
				}
			}
		}
	}

	finalizedBy(update)
}

tasks.register('addTestData') {
	group = "database"
	description = "Add test data to database"

	configurations {
		jdbc
	}
	dependencies {
		jdbc 'org.postgresql:postgresql:42.7.3'
	}

	def dburl
	def user
	def password

	doFirst {
		def props = new Properties()
		file("database/localDatabase.properties").withInputStream { props.load(it) }
		dburl = props.getProperty("url")
		user = props.getProperty("username")
		password = props.getProperty("password")
	}

	doLast {
		def sqlClassLoader = Sql.classLoader
		configurations.jdbc.each { sqlClassLoader.addURL it.toURI().toURL() }

		def sqlScript = new File("database/test_data.sql").text
		def sqlCommands = sqlScript.split(';')

		Sql.withInstance(dburl, user, password, 'org.postgresql.Driver') {
			sql ->
				sqlCommands.each { query ->
					if (!query.trim().isEmpty()) {
						sql.executeInsert(query.trim())
					}
				}
		}
	}
}

ext {
	// Directory for generated main Java sources
	generatedMainJava = "${buildDir}/generated"
}

sourceSets {
	// Add generated sources directory.
	main.java.srcDir generatedMainJava
}

compileJava	{
	options.compilerArgs += ['-AaddGenerationDate=true']
	options.annotationProcessorGeneratedSourcesDirectory = file(generatedMainJava)
}
